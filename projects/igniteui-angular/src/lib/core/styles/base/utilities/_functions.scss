////
/// @group Utilities
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// Converts pixels to relative values (em).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function em($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return ($pixels / $context) * 1em;
}

/// Pixels to root relative values (rem).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function rem($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return ($pixels / $context) * 1rem;
}

/// Calculates the luminance for a given color.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests.
///
/// @param {Color} $color - The color to calculate luminance for.
@function luminance($color) {
    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

/// Calculates the contrast ratio between two colors.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
///
/// @param {Color} $background - The background color.
/// @param {Color} $foreground - The foreground color.
/// @returns {Number} - The contrast ratio between the background and foreground colors.
@function contrast($background, $foreground) {
    $backLum: luminance($background) + .05;
    $foreLum: luminance($foreground) + .05;

    @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

/// Generates a color shade from base color and saturation level.
/// @access private
/// @group Palettes
/// @param {Color} $color - The base color to be used to generate a color shade.
/// @param {number|string} $saturation - The saturation level used to create the color shade.
@function gen-color($color, $saturation) {
    @if ($saturation == 50) {
        @return lighten(saturate($color, 10.4), 37.7);
    } @else if ($saturation == 100) {
        @return lighten(desaturate($color, 10.4), 31.8);
    } @else if ($saturation == 200) {
        @return lighten(desaturate($color, 17), 18.7);
    } @else if ($saturation == 300) {
        @return lighten(desaturate($color, 12.9), 9.1);
    } @else if ($saturation == 400) {
        @return lighten(desaturate($color, 6.6), 4.1);
    } @else if ($saturation == 600) {
        @return darken(saturate($color, 12.4), 5.1);
    } @else if ($saturation == 700) {
        @return darken(saturate($color, 24.5), 8.8);
    } @else if ($saturation == 800) {
        @return darken(saturate($color, 23.2), 12.7);
    } @else if ($saturation == 900) {
        @return darken(saturate($color, 16.1), 17);
    } @else if ($saturation == 'A100') {
        @return lighten(saturate($color, 10.4), 16.7);
    } @else if ($saturation == 'A200') {
        @return lighten(saturate($color, 10.4), 7.7);
    } @else if ($saturation == 'A400') {
        @return darken(saturate($color, 10.4), 3.9);
    } @else if ($saturation == 'A700') {
        @return darken(saturate($color, 10.4), 16.6);
    }
}

/// Retrieves a color from a color palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette - The source palette map.
/// @param {string} $color - The target color from the color palette.
/// @param {number|string} $variant [500] - The target color shade from the color palette.
/// @returns {Color} White if no palette, color, and variant matches found.
@function igx-color($palette, $color, $variant: 500) {
    @if map-exists($palette) and map-key-exists($palette, $color) and map-key-exists($color, $variant) {
        @return map-get(map-get($palette, $color), $variant);
    }
    @return #fff;
}

/// Retrieves a contrast text color for a given color from a color palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette - The source palette map.
/// @param {string} $color - The target color from the color palette.
/// @param {number|variant} $variant - The target color shade from the color palette.
/// @returns {Color} [#fff] - Returns white if now palette, color and/or variant matches found.
@function igx-contrast-color($palette, $color, $variant: 500) {
    @if map-exists($palette) and map-key-exists($palette, $color) and map-key-exists($color, $variant) {
        @return map-get(map-get(map-get($palette, $color), 'contrast'), $variant);
    }
    @return #fff;
}

/// Returns a contrast color for a passed color.
/// @access public
/// @group Palettes
/// @param {Color} $color - The color used to return a contrast color for.
/// @returns {Color} - Returns either white or black depending on the luminance of the input color.
@function text-contrast($color) {
    $lightContrast: contrast($color, white);
    $darkContrast: contrast($color, black);

    @if ($lightContrast > $darkContrast) {
        @return white;
    } @else {
        @return black;
    }
}

/// Test if `$value` is a valid direction.
/// @access private
/// @param {*} $value - The value to test.
/// @return {Bool}
@function is-direction($value) {
    $is-keyword: index( ( to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value)=='number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    @return $is-keyword or $is-angle;
}

/// Test if a component, or list of components
/// is in the list of known components.
/// @access private
/// @param {String|List} $excludes - The components list to check in.
/// @return {List} - The list of passed items.
@function is-component($items) {
    $register: map-keys($components);
    @each $item in $items {
        @if not(index($register, $item)) {
            @error unquote('Can\'t exclude "#{$item}" because it is not in the list of known components.');
        }
    }
    @return $items;
}

/// Converts numbers to HEX value strings.
/// @access private
/// @param {number} $num - The number to convert.
/// @param {radix} $radix - The base radix to use for the conversion.
/// @return {String} - The resulting string.
@function to-string($num, $radix: 16) {
    $chars: '0123456789abcdef';
    $result: '';
    $sign: '';
    @if $num < 0 {
        $sign: '-';
        $num: abs($num);
    }
    @if $num >= 0 and $num < $radix {
        @return $sign + str-slice($chars, ($num + 1), ($num + 1));
    }
    $q: $num;
    @while $q !=0 {
        $r: $q % $radix;
        $q: floor($q / $radix);
        $result: str-slice($chars, ($r + 1), ($r + 1)) + $result;
    }
    @return $sign + $result;
}

/// Converts a rgba color to a hexidecimal color.
/// @access public
/// @requires {function} to-string
/// @param {Color} $rgba - The rgba color to convert.
/// @return {Color} - The hexidecimal representation of the rgba value.
@function hexrgba($rgba) {
    @if type-of($rgba) == color {
        $red: red($rgba);
        $green: green($rgba);
        $blue: blue($rgba);
        $a: alpha($rgba);
        $r: floor($a * $red + (1 - $a) * 255);
        $g: floor($a * $green + (1 - $a) * 255);
        $b: floor($a * $blue + (1 - $a) * 255);
        @return rgb($r, $g, $b);
    }
    @return $rgba;
}

/// Extends a Map object with the properties of another Map object.
/// @access private
/// @param {Map} $map1 - The source map to get extended.
/// @param {Map} $map2 - The map extending the source map.
/// @returns {Map} - Returns the original map extended with the properties of the second map.
@function extend($map1, $map2) {
    $result: ();
    @each $key, $value in $map2 {
        @if not($value) {
            $result: map-merge($result, (
                #{$key}: map-get($map1, $key)
            ));
        } @else {
            $result: map-merge($result, (
                #{$key}: $value
            ));
        }
    }
    $result: map-merge($map1, $result);
    @return $result;
}

/// Generates a Material-like color palette for a single color.
/// @access private
/// @group Palettes
/// @requires {function} gen-color
/// @param {Color} $color - The base color used to generate the palette.
/// @returns {Map} - A map consisting of 26 color variations.
@function generate-palette($color) {
    @return (
        50: gen-color($color, 50),
        100: gen-color($color, 100),
        200: gen-color($color, 200),
        300: gen-color($color, 300),
        400: gen-color($color, 400),
        500: $color,
        600: gen-color($color, 600),
        700: gen-color($color, 700),
        800: gen-color($color, 800),
        900: gen-color($color, 900),
        A100: gen-color($color, 'A100'),
        A200: gen-color($color, 'A200'),
        A400: gen-color($color, 'A400'),
        A700: gen-color($color, 'A700'),
        contrast: (
            50: text-contrast(gen-color($color, 50)),
            100: text-contrast(gen-color($color, 100)),
            200: text-contrast(gen-color($color, 200)),
            300: text-contrast(gen-color($color, 300)),
            400: text-contrast(gen-color($color, 400)),
            500: text-contrast($color),
            600: text-contrast(gen-color($color, 600)),
            700: text-contrast(gen-color($color, 700)),
            800: text-contrast(gen-color($color, 800)),
            900: text-contrast(gen-color($color, 900)),
            A100: text-contrast(gen-color($color, 'A100')),
            A200: text-contrast(gen-color($color, 'A200')),
            A400: text-contrast(gen-color($color, 'A400')),
            A700: text-contrast(gen-color($color, 'A700')),
        )
    );
}

/// Generates a color palette.
/// @access public
/// @group Palettes
/// @requires {function} generate-palette
/// @param {Color} $primary - The primary color used to generate the primary color palette.
/// @param {Color} $secondary - The secondary color used to generate the secondary color palette.
/// @param {Color} $info [#1377d5] - The information color used throughout the application.
/// @param {Color} $success [#4eb862] - The success color used throughout the application.
/// @param {Color} $warn [#fbb13c] - The warning color used throughout the application.
/// @param {Color} $error [#ff134a] - The error color used throughout the application.
/// @returns {Map} - A map consisting of 74 color variations, including the `primary`, `secondary`, `grays`,
/// `info`, `success`, `warn`, and `error` colors.
@function igx-palette(
    $primary,
    $secondary,
    $info: #1377d5,
    $success: #4eb862,
    $warn: #fbb13c,
    $error: #ff134a
) {
    $primary-palette: generate-palette($primary);
    $secondary-palette: generate-palette($secondary);

    // @debug 'Primary Colors Palette: #{$primary-palette}';
    // @debug 'secondary Colors Palette: #{$secondary-palette}';
    // @debug 'Warn Colors Palette: #{$warn-palette}';

    @return (
        primary: $primary-palette,
        secondary: $secondary-palette,
        info: (500: $info),
        success: (500: $success),
        warn: (500: $warn),
        error: (500: $error),
        grays: (
            50: rgba(0, 0, 0, .02),
            100: rgba(0, 0, 0, .04),
            200: rgba(0, 0, 0, .08),
            300: rgba(0, 0, 0, .12),
            400: rgba(0, 0, 0, .26),
            500: rgba(0, 0, 0, .38),
            600: rgba(0, 0, 0, .54),
            700: rgba(0, 0, 0, .62),
            800: rgba(0, 0, 0, .74),
            900: rgba(0, 0, 0, .87),
            contrast: (
                50: text-contrast(hexrgba(rgba(0, 0, 0, .02))),
                100: text-contrast(hexrgba(rgba(0, 0, 0, .04))),
                200: text-contrast(hexrgba(rgba(0, 0, 0, .08))),
                300: text-contrast(hexrgba(rgba(0, 0, 0, .12))),
                400: text-contrast(hexrgba(rgba(0, 0, 0, .26))),
                500: text-contrast(hexrgba(rgba(0, 0, 0, .38))),
                600: text-contrast(hexrgba(rgba(0, 0, 0, .54))),
                700: text-contrast(hexrgba(rgba(0, 0, 0, .62))),
                800: text-contrast(hexrgba(rgba(0, 0, 0, .74))),
                900: text-contrast(hexrgba(rgba(0, 0, 0, .87))),
            )
        )
    );
}

/// Returns a string from the elements of a list.
/// Works recursively so the elements can be lists themselves.
/// @param {List} $list [null] - A list of elements to be turned into a string.
/// @param {String} $glue [''] - A string symbol to join the elements by.
@function implode($list, $glue: '') {
    $result: null;
    @for $i from 1 through length($list) {
        $e: nth($list, $i);
        @if type-of($e) == list {
            $result: $result#{implode($e, $glue)};
        } @else {
            $result: if(
                $i != length($list),
                $result#{$e}#{$glue},
                $result#{$e}
            );
        }
    }
    @return $result;
}

/// Returns a CSS property value. It could return either css '--var' or
/// a plain string value based on theme configuration.
/// @access public
/// @param {map} $map - The source theme to be used to read values from.
/// @param {string} $key - A key from the theme map to assign as value to the property.
/// @example scss Assign the color property in a rule-set to a value from the default avatar theme.
///   %igx-avatar-icon {
///     color: --var($avatar-theme, 'icon-color');
///   }
///   // If legacy-support is off, it will produce the following:
///   // %igx-avatar-icon {
///   //   color: var(--igx-avatar-icon-color);
///   // }
///   // otherwise, it will return the value for key 'icon-color' in the '$avatar-theme';
/// @returns {String} - The value of the key in the passed map, or the name of key concatenated with the key name.
@function --var($map, $key) {
    $igx-legacy-support: if(global-variable-exists('igx-legacy-support'), $igx-legacy-support, true);

    @if map-has-key($map, $key) {
        @if $igx-legacy-support == false {
            @return unquote('var(--#{map-get($map, 'name')}-#{$key})');
        } @else {
            @return map-get($map, $key);
        }
    } @else {
        @error unquote('The map you passed does not contain a key #{$key}');
    }
}

/// Splits a string into a list by a given separator.
/// @param {string} $string - The string to split.
/// @param {string} $separator - The string separator to split the string by.
///
@function str-split($string, $separator) {
    $split-arr: ();
    $index : str-index($string, $separator);
    @while $index != null {
        $item: str-slice($string, 1, $index - 1);
        $split-arr: append($split-arr, $item);
        $string: str-slice($string, $index + 1);
        $index : str-index($string, $separator);
    }
    $split-arr: append($split-arr, $string);
    @return $split-arr;
}

/// @ignore
@function get-theme($themes, $theme)  {
    @if type-of($themes) == 'map' and map-has-key($themes, $theme) {
        @return map-get($themes, $theme);
    }

    @if (function-exists('get-function')) {
        @return call(get-function(#{$theme}-theme));
    } @else {
        @return call((#{$theme}-theme));
    }
}
